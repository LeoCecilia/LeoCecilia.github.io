<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[面试经历]]></title>
      <url>https://leocecilia.github.io/2017/03/31/interview%20experience/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过一个星期的写简历，一个星期的等待时间，一个星期的面试时间，我终于都拿到了offer，感觉实在是不容易啊，现在特别记录一下面试时候的感觉。</p>
<h2 id="软通动力面试"><a href="#软通动力面试" class="headerlink" title="软通动力面试"></a>软通动力面试</h2><p>刚开始进去感觉还有点小紧张，然后进去了之后，就让做一份试题，是关于前端的试题，里面有很多试题是我没有见过的，但是那里感觉有很多题目都是直接css写在html上面的，顿时就感觉这家外包公司在编码规范上就做得不太好，但是呢，有些css的属性我也确实忘记了，想起先前我一直都是使用的搜索式的学习，所以有很多属性都记得不太清楚。后来呢，那个hr就说对java开发感不感兴趣啊，可以来我们这里进行培训，然后每个月有1000块钱的补贴，说实话，那时候确实有一点点小动心。但是转念一想觉得世界上哪里有那么多便宜的事情啊，人家去培训你，肯定是要和你签订合约的，到时候合同上有什么猫腻的话，你还不就死定了，哎，又没有技术面试，想想就觉得不开心</p>
<h2 id="方遒教育面试"><a href="#方遒教育面试" class="headerlink" title="方遒教育面试"></a>方遒教育面试</h2><p>这次面试差点就迟到了，哎，下次出门应该再早点才行的。面试过程先进行了自我介绍，然后呢，说一下自己的项目经验什么之类的，后来他问到了关于jquery的想法，面完之后，我才发现我对<strong>ajax技术</strong>其实并不太了解，想想还是得多点回去啃书，补回基础。后来，我就问他，我现在的状态或者说我所掌握的知识程度怎么样。然后他说我现在的状态其实还挺不错的，但是我学的不够深入，基础也不太扎实，如果有人带着的话，带我会上手的相对快一些，啊觉得回去多看基础还是挺重要的。</p>
<h2 id="佳都科技面试"><a href="#佳都科技面试" class="headerlink" title="佳都科技面试"></a>佳都科技面试</h2><p>这次又是路痴的问题，哎不说了。刚开始面试官不按常理的出牌，顿时就将我的思路弄乱，以致于差点把面试搞砸了。然后面试官看了我的作品，于是我就把我的树形组件做给她看，但是一打开遍历的时候，发现这个遍历有bug，顿时就觉得相当的尴尬，而恰好我又忘记了自己原来已经带了鼠标，然后就很不好意思地问她，有没有网络/有没有鼠标啊之类的问题，这样的自己让我感觉很心慌。然后我就给她看了我自己做的静态页面，她觉得我这几个月做了这么多东西，已经相当不错了，顿时心中的紧张缓解了不少。然后她就让我去做机试，写了两个页面，其中一个实现tab变换，需要用到事件委托，然后当我真正去做的时候，发现有很多属性我都忘记了(这不正是所谓的搜索式的学习嘛，确实很不好)，然后心里就有点急，做了大概两个小时，终于将这个页面做好了(js代码写了20行)，然后当她看到页面的时候，就说页面实现的还挺不错的，可是我的js并没有考虑<strong>扩展性</strong>！这是相当重要的。比如说要是需求有所变动的话，那你岂不是都要改嘛。接着她仅用了4行代码就实现了那个功能，这真的把我给秒杀了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),<span class="comment">//不用重复请求</span></div><div class="line">id = $<span class="keyword">this</span>.attr(attrid);<span class="comment">//获取自定义属性</span></div><div class="line">$<span class="keyword">this</span>.addClass(<span class="string">'active'</span>).sibling().removeClass(<span class="string">'active'</span>);<span class="comment">//这里使用了链式调用，是相当节省性能的</span></div><div class="line">$(id).css(<span class="string">'display'</span>,<span class="string">'block'</span>).sibling(<span class="string">'main'</span>).css(<span class="string">'display'</span>,<span class="string">'none'</span>);</div></pre></td></tr></table></figure>
<p>顿时心中油然而生一股崇拜之情！然后她就说</p>
<blockquote>
<p>我发现你们这些应届生喜欢用插件去追求一些很酷炫的动效，但是却忽略了基础本身，要多看jquery，重拾回基础，其实很多大公司招应届生，首先考你的都是你的基础是否扎实，当然各种的网络协议啊，计算机基础都是要考到的。</p>
</blockquote>
<p>后来她就跟我说，其实她真的挺喜欢我的，但是她们只招大四，申请一下，看看能不能让我进去做前端开发吧</p>
<h2 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h2><p>三家的面试终于完满落幕，哈哈哈，姐姐我拿到了方遒教育的offer了，感觉还是挺开心的，希望能拿到更多的offer，这样选择权就能在我手中啦!</p>
<h2 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h2><ol>
<li>要有积极的心理暗示，觉得既然人家邀请你去面试，说明你的实习经历或者说教育经历是符合人家的需求，所以要自信，并且本着能让HR获得指标的心态，开开心心地去面试</li>
<li>要多看书，自己的基础不行，要知道大公司找实习都是要先问你计算机基础的，因为他面前端程序员之前，他是先面一个程序员的，所以基础是很重要的！</li>
<li>要多虚心向别人学习，好好学习，方能够天天向上哦！加油</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IE和标准DOM事件模型的区别]]></title>
      <url>https://leocecilia.github.io/2017/03/23/IE%E5%92%8C%E6%A0%87%E5%87%86DOM%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[事件滚动侦听]]></title>
      <url>https://leocecilia.github.io/2017/03/19/spy-on-scroll/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>简历中，需要做到这样的效果，当某个元素出现在视口时，动画开始启动，现在来介绍如何获得某个元素在网页上的确切位置，下面教程总结了javascript在网页定位方面的相关知识</p>
<h2 id="网页大小和浏览器窗口大小"><a href="#网页大小和浏览器窗口大小" class="headerlink" title="网页大小和浏览器窗口大小"></a>网页大小和浏览器窗口大小</h2><ul>
<li>两个概念<ul>
<li>网页大小指一张网页的全部面积，通常情况下，网页的大小由内容和css样式表决定。</li>
<li>浏览器窗口大小，则是值在浏览器窗口中看到的那部分网页面积，又叫viewport(视口)。</li>
</ul>
</li>
</ul>
<p>很显然，如果网页的内容能够在浏览器窗口中全部显示（也就是不出现滚动条），那么网页的大小和浏览器窗口的大小是相等的。如果不能全部显示，则滚动浏览器窗口，可以显示出网页的各个部分。</p>
<h2 id="获取网页大小"><a href="#获取网页大小" class="headerlink" title="获取网页大小"></a>获取网页大小</h2><ul>
<li>clientHeight和clientWidth属性</li>
</ul>
<p><img src="http://i260.photobucket.com/albums/ii7/ruanyf/blog/bg2009091402.gif" alt="clientHeight和clientWidth属性"><br>(图一 clientHeight和clientWidth属性)<br>因此，document元素的<code>clientHeight</code>和<code>clientWidht</code>属性代表网页大小</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">getViewport</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"BackCompat"</span>)&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　　　<span class="attr">width</span>: <span class="built_in">document</span>.body.clientWidth,</div><div class="line">　　　　　　　　<span class="attr">height</span>: <span class="built_in">document</span>.body.clientHeight</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123;</div><div class="line">　　　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　　　<span class="attr">width</span>: <span class="built_in">document</span>.documentElement.clientWidth,</div><div class="line">　　　　　　　　<span class="attr">height</span>: <span class="built_in">document</span>.documentElement.clientHeight</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p><code>getViewport</code>函数就可以返回浏览器高和宽，需注意</p>
<blockquote>
<ol>
<li>这个函数必须在页面加载完成后才能运行，否则document对象还没生成，浏览器会报错。</li>
<li>大多数情况下，都是<code>document.documentElement.clientWidth</code>返回正确值。但是，在IE6的quirks模式中，<code>document.body.clientWidth</code>返回正确的值，因此函数中加入了对文档模式的判断。</li>
<li><code>clientWidth</code>和<code>clientHeight</code>都是只读属性，不能对它们赋值。</li>
</ol>
</blockquote>
<h2 id="获取网页大小的另一种方法"><a href="#获取网页大小的另一种方法" class="headerlink" title="获取网页大小的另一种方法"></a>获取网页大小的另一种方法</h2><ul>
<li><code>scrollHeight</code>和<code>scrollWidth</code>属性，指包含滚动条在内的视觉面积。</li>
<li><code>document</code>对象的<code>scrollHeight</code>和<code>scrollWidth</code>属性就是网页的大小，意思就是滚动条滚过的所有长度和宽度。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPagearea</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"BackCompat"</span>)&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　　　<span class="attr">width</span>: <span class="built_in">document</span>.body.scrollWidth,</div><div class="line">　　　　　　　　<span class="attr">height</span>: <span class="built_in">document</span>.body.scrollHeight</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123;</div><div class="line">　　　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　　　<span class="attr">width</span>: <span class="built_in">document</span>.documentElement.scrollWidth,</div><div class="line">　　　　　　　　<span class="attr">height</span>: <span class="built_in">document</span>.documentElement.scrollHeight</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>但是，这个函数有一个问题。<strong>如果网页内容能够在浏览器窗口中全部显示，不出现滚动条，那么网页的clientWidth和scrollWidth应该相等。</strong>但是实际上，不同浏览器有不同的处理，这两个值未必相等。所以，我们需要取它们之中较大的那个值，因此要对getPagearea()函数进行改写。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPagearea</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"BackCompat"</span>)&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　　　<span class="attr">width</span>: <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollWidth,</div><div class="line">　　　　　　　　　　　　　　　　<span class="built_in">document</span>.body.clientWidth),</div><div class="line">　　　　　　　　<span class="attr">height</span>: <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollHeight,</div><div class="line">　　　　　　　　　　　　　　　　<span class="built_in">document</span>.body.clientHeight)</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123;</div><div class="line">　　　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　　　<span class="attr">width</span>: <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollWidth,</div><div class="line">　　　　　　　　　　　　　　　　<span class="built_in">document</span>.documentElement.clientWidth),</div><div class="line">　　　　　　　　<span class="attr">height</span>: <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollHeight,</div><div class="line">　　　　　　　　　　　　　　　　<span class="built_in">document</span>.documentElement.clientHeight)</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h2 id="获取网页元素的绝对位置"><a href="#获取网页元素的绝对位置" class="headerlink" title="获取网页元素的绝对位置"></a>获取网页元素的绝对位置</h2><ul>
<li>网页元素的绝对位置，指该元素的左上角相当于整张网页左上角的坐标，这个绝对位置需通过计算方能得到。</li>
<li><code>offsetTop</code>和<code>offsetLeft</code>属性，表示该元素左上角与父容器(<code>offsetParent</code>对象)左上角的距离。所以，只需要将这两个值进行累加，就可以得到该元素的绝对坐标<br><img src="http://i260.photobucket.com/albums/ii7/ruanyf/blog/bg2009091403.gif" alt="offsetTop和offsetLft属性"></li>
</ul>
<p>以下两个函数可以用来获取绝对位置的横坐标和纵坐标</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> actualLeft = element.offsetLeft;</div><div class="line">　　　　<span class="keyword">var</span> current = element.offsetParent;</div><div class="line">　　　　<span class="keyword">while</span> (current !== <span class="literal">null</span>)&#123;</div><div class="line">　　　　　　actualLeft += current.offsetLeft;</div><div class="line">　　　　　　current = current.offsetParent;</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> actualLeft;</div><div class="line">　　&#125;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> actualTop = element.offsetTop;</div><div class="line">　　　　<span class="keyword">var</span> current = element.offsetParent;</div><div class="line">　　　　<span class="keyword">while</span> (current !== <span class="literal">null</span>)&#123;</div><div class="line">　　　　　　actualTop += current.offsetTop;</div><div class="line">　　　　　　current = current.offsetParent;</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> actualTop;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>由于在表格和iframe中，offsetParent对象未必等于父容器，所以上面的函数对于表格和iframe中的元素不适用。</p>
<h2 id="获取网页元素的相对位置"><a href="#获取网页元素的相对位置" class="headerlink" title="获取网页元素的相对位置"></a>获取网页元素的相对位置</h2><ul>
<li><p>网页元素的相对位置，指该元素左上角相当于浏览器窗口左上角的坐标，有了绝对位置后，获取相对位置就容易了，只要将绝对坐标减去页面的滚动条滚动的距离即可。</p>
</li>
<li><p>document的<code>scrollTop</code>属性指的是滚动条滚动的垂直距离。同理<code>scrollLeft</code>是滚动条滚动的水平距离。</p>
</li>
</ul>
<p><img src="http://i260.photobucket.com/albums/ii7/ruanyf/blog/bg2009091404.gif" alt="获取元素的相对位置"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">　<span class="function"><span class="keyword">function</span> <span class="title">getElementViewLeft</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> actualLeft = element.offsetLeft;</div><div class="line">　　　　<span class="keyword">var</span> current = element.offsetParent;</div><div class="line">　　　　<span class="keyword">while</span> (current !== <span class="literal">null</span>)&#123;</div><div class="line">　　　　　　actualLeft += current.offsetLeft;</div><div class="line">　　　　　　current = current.offsetParent;</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"BackCompat"</span>)&#123;</div><div class="line">　　　　　　<span class="keyword">var</span> elementScrollLeft=<span class="built_in">document</span>.body.scrollLeft;</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123;</div><div class="line">　　　　　　<span class="keyword">var</span> elementScrollLeft=<span class="built_in">document</span>.documentElement.scrollLeft; </div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> actualLeft-elementScrollLeft;</div><div class="line">　　&#125;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">getElementViewTop</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> actualTop = element.offsetTop;</div><div class="line">　　　　<span class="keyword">var</span> current = element.offsetParent;</div><div class="line">　　　　<span class="keyword">while</span> (current !== <span class="literal">null</span>)&#123;</div><div class="line">　　　　　　actualTop += current. offsetTop;</div><div class="line">　　　　　　current = current.offsetParent;</div><div class="line">　　　　&#125;</div><div class="line">　　　　 <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"BackCompat"</span>)&#123;</div><div class="line">　　　　　　<span class="keyword">var</span> elementScrollTop=<span class="built_in">document</span>.body.scrollTop;</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123;</div><div class="line">　　　　　　<span class="keyword">var</span> elementScrollTop=<span class="built_in">document</span>.documentElement.scrollTop; </div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> actualTop-elementScrollTop;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p><code>scrollLeft</code>和<code>scrollTop</code>属性是可以赋值的，并且会立即自动滚动网页的相应位置，可以利用他们改变网页的相对位置。<code>element.scrollIntoView()</code>方法也有类似的这样，可使网页元素出现在浏览器窗口的左上角。</p>
<h2 id="获取元素位置的快速方法"><a href="#获取元素位置的快速方法" class="headerlink" title="获取元素位置的快速方法"></a>获取元素位置的快速方法</h2><ul>
<li><code>getBoundingClientRect()</code>，返回一个对象，包含<code>left</code>,<code>right</code>,<code>top</code>,<code>bottom</code>四个属性，分别对应该元素的左上角和右下角相当于浏览器窗口(viewport)左上角的距离<br>所以，网页元素的相对位置为</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> X= <span class="keyword">this</span>.getBoundingClientRect().left;</div><div class="line"></div><div class="line">　　<span class="keyword">var</span> Y =<span class="keyword">this</span>.getBoundingClientRect().top;</div></pre></td></tr></table></figure>
<p>再加上滚动距离，就可以得到绝对位置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> X= <span class="keyword">this</span>.getBoundingClientRect().left+<span class="built_in">document</span>.documentElement.scrollLeft;</div><div class="line"></div><div class="line">　　<span class="keyword">var</span> Y =<span class="keyword">this</span>.getBoundingClientRect().top+<span class="built_in">document</span>.documentElement.scrollTop;</div></pre></td></tr></table></figure>
<p>转载自<a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="external">利用js获取元素位置</a></p>
<h2 id="滚动事件侦听"><a href="#滚动事件侦听" class="headerlink" title="滚动事件侦听"></a>滚动事件侦听</h2><ul>
<li><code>window.scroll()</code>是用于侦听页面滚动的元素<br><a href="http://www.runoob.com/jquery/event-scroll.html" target="_blank" rel="external">参考链接</a></li>
</ul>
<p>以上是储备知识，现在来说一下我在编码中所遇到的困境</p>
<hr>
<h2 id="困境"><a href="#困境" class="headerlink" title="困境"></a>困境</h2><p>在调试的时候，<code>window.scroll()</code>无法运行，通过stackflow查询到</p>
<blockquote>
<p>webkit use <code>body</code> for keeping track of scrolling，document.documentElement.scrollTop always returns 0 on chrome</p>
</blockquote>
<p>而恰好为了让每个section都占据这个viewport，我将body的<code>height</code>设成了<code>100%</code>，所以当我remove这个css之后，<code>window.scroll()</code>正常运行，现附上代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> top = <span class="built_in">document</span>.getElementById(<span class="string">'Skill'</span>).getBoundingClientRect().top;</div><div class="line">    <span class="keyword">if</span> (!flag) &#123;<span class="comment">//只有一次机会</span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> barList = $(<span class="string">'.progress-bar'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (top &lt;= <span class="number">0</span>) &#123; <span class="comment">//outerHeight()[jquery] === offsetHeight[js]</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; barList.length; i++) &#123;</div><div class="line">          flag = <span class="number">1</span>;</div><div class="line">          <span class="comment">//barList[i]是一个DOM，故要使用$(barList[i])返回该jquery对象</span></div><div class="line">          <span class="keyword">var</span> Width = $(barList[i]).attr(<span class="string">'aria-valuenow'</span>) + <span class="string">'%'</span>;</div><div class="line">          $(barList[i]).animate(&#123;</div><div class="line">            <span class="attr">width</span>: Width</div><div class="line">          &#125;, <span class="number">750</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Top = <span class="built_in">document</span>.getElementById(<span class="string">'Contact'</span>).getBoundingClientRect().top;</div><div class="line">    <span class="keyword">if</span> (Top &lt;= <span class="number">0</span> &amp;&amp; handle) &#123;</div><div class="line">      handle = <span class="literal">false</span>;</div><div class="line">      $(<span class="string">'.flip-container'</span>).toggleClass(<span class="string">'flip'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Top &gt; <span class="number">0</span>) &#123;</div><div class="line">      handle = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[画面翻转]]></title>
      <url>https://leocecilia.github.io/2017/03/18/turn-over-effect/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上有很多关于画面翻转的教程，现在转载一篇个人认为比较好的做法</p>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><p>实现正反面效果的HTML代码，估计你想到该是这样的</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flip-container"</span> <span class="attr">ontouchstart</span>=<span class="string">"this.classList.toggle('hover');"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flipper"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"front"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 前面内容 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 背面内容 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>正如你所想，有两个容器，分别存放卡片‘前面’和‘后面’，通过css，我们会指定这两个容器元素自己的这样。<strong>注意</strong><code>ontouchstart</code>这段js，能让你使用触屏来触发翻转动作，显然应该将这段代码单独提取，让javaScript代码放到一起</p>
<h2 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 翻转动画 */</span></div><div class="line"><span class="selector-class">.flip-container</span>&#123;</div><div class="line">  <span class="attribute">-webkit-perspective</span>: <span class="number">1000</span>;</div><div class="line">  <span class="attribute">perspective</span>: <span class="number">1000</span>;<span class="comment">/*透视属性*/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.flip-container</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.flipper</span>, <span class="selector-class">.flip-container</span><span class="selector-class">.hover</span> <span class="selector-class">.flipper</span>&#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.flip-container</span>, <span class="selector-class">.front</span>, <span class="selector-class">.back</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">95px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">95px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* flip speed goes here */</span></div><div class="line"><span class="selector-class">.flipper</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: <span class="number">0.6s</span>;</div><div class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* hide back of pane during swap */</span></div><div class="line"><span class="selector-class">.front</span>,<span class="selector-class">.back</span>&#123;</div><div class="line">  <span class="attribute">backface-visibility</span>: hidden;<span class="comment">/* 背面可视性 */</span></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* placed above back */</span></div><div class="line"><span class="selector-class">.front</span> &#123;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">8px</span> <span class="number">10px</span> <span class="number">10px</span> -<span class="number">9px</span> <span class="built_in">rgba</span>(0,0,0,0.4);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* back, initially hidden pane */</span></div><div class="line"><span class="selector-class">.back</span> &#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg);</div><div class="line">  <span class="attribute">box-shadow</span>: -<span class="number">8px</span> <span class="number">10px</span> <span class="number">10px</span> -<span class="number">9px</span> <span class="built_in">rgba</span>(0,0,0,0.4);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>在<code>flip-container</code>容器元素上设置整个动画区域的透视<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective" target="_blank" rel="external">perspective</a>属性</li>
<li>当<code>flip-container</code>元素遇到鼠标悬停事件时，<code>flipper</code>旋转180deg，这里是控制旋转速度的地方，若旋转值设为-180deg，逆方向旋转</li>
<li>表示卡片正反面的元素都要绝对定位，这样他们才能在相同的位置相互遮挡，他们的背面可视性<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility" target="_blank" rel="external">backface-visibility</a>设置为隐藏，这样每个卡片的背面在翻转时都看不见的</li>
<li>将卡片的正面设置为比一个背面要高的<code>z-index</code>的值，保证卡片的正面在最上面</li>
<li>将背面卡片旋转180deg，这样能让她扮演背面的角色</li>
</ul>
<h2 id="Ana-Tudor’s-quote"><a href="#Ana-Tudor’s-quote" class="headerlink" title="Ana Tudor’s quote"></a>Ana Tudor’s quote</h2><blockquote>
<p>对卡片元素的<a href="https://drafts.csswg.org/css-transforms/#transform-style-property" target="_blank" rel="external">某些属性设置一些特定的值</a>(例如)(like overflow: hidden)会导致其子元素丧失3D变换功能。我认可他的观点，因为正是在本文的例子中我正好遇到了overflow: hidden相关的麻烦，它导致了3D变换子元素全都出现在了同一个平面上，有几个是被旋转了180度。</p>
</blockquote>
<h2 id="触发css翻转"><a href="#触发css翻转" class="headerlink" title="触发css翻转"></a>触发css翻转</h2><p>若你喜欢用javaScript来触发翻转动作，下面这个简单的css样式能帮到你</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flip-container</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.flipper</span>, <span class="selector-class">.flip-container</span><span class="selector-class">.hover</span> <span class="selector-class">.flipper</span>, <span class="selector-class">.flip-container</span><span class="selector-class">.flip</span> <span class="selector-class">.flipper</span> &#123;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用javascript给容器元素添加这个css <code>flip</code>类就能触发卡片翻转，不需要用户系统鼠标在上面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#myCard"</span>).classList.toggle(<span class="string">"flip"</span>);</div></pre></td></tr></table></figure>
<p>资料:<a href="http://www.webhek.com/post/css-flip.html" target="_blank" rel="external">3d翻转效果</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[3dtagCloud]]></title>
      <url>https://leocecilia.github.io/2017/03/18/3dtagCloud/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近准备要找实习了，然后就想着要做个漂漂亮亮的简历。想起ife项目中的标签云，于是便准备做一个3d的标签云效果</p>
<hr>
<h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><ul>
<li>为所有标签要随机生成坐标，平均分布在球面上，然后再根据旋转公式，获取旋转后的坐标，然后再进行动画。以下是具体做法</li>
</ul>
<h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><ul>
<li>sinθ与cosθ的值域为[-1,1]（很重要）</li>
<li>球坐标公式，以坐标原点为中心，半径为R的球面的参数方程为</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x = r * sinθ * cosΦ;</div><div class="line">y = r * sinθ * sinΦ;  </div><div class="line">z = r * cosθ;</div></pre></td></tr></table></figure>
<p>  <span id="jump"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/Spherical_with_grid.svg/300px-Spherical_with_grid.svg.png" alt="原理"></span><br>资料：<a href="http://baike.baidu.com/item/%E7%90%83%E9%9D%A2?fr=aladdin" target="_blank" rel="external">球坐标公式推导</a></p>
<ul>
<li>旋转公式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c = cosβ * x - sinβ * y;<span class="comment">//(x,y,z)为旋转前的坐标，(c,d,z1)为旋转后的坐标</span></div><div class="line">d = cosβ * y - sinβ * x;</div></pre></td></tr></table></figure>
<p><img src="http://pic002.cnblogs.com/img/ywxgod/201008/2010080600581929.jpg" alt="原理"><br>球绕某一轴旋转可以抽象成圆绕圆心旋转!<br>资料：<a href="http://www.cnblogs.com/ywxgod/archive/2010/08/06/1793609.html" target="_blank" rel="external">坐标旋转公式推导</a></p>
<h2 id="设置坐标"><a href="#设置坐标" class="headerlink" title="设置坐标"></a>设置坐标</h2><p>设置坐标是相对较难的一步，因为我们要将标签平均分布在球面上，藉此，引用一下大神的式子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">θ = arccos(((<span class="number">2</span> * i) - <span class="number">1</span>) / len - <span class="number">1</span>); </div><div class="line">Φ = θ * sqrt(len * π);</div></pre></td></tr></table></figure>
<p><a href="#jump">如图</a></p>
<blockquote>
<p>第一个式子<code>arccos</code>中的<code>(2 * i) - 1) / len - 1</code>实际上是一个在[-1,1]区间中关于0对称的等差数列(因为sinθ,cosθ的值域是[-1,1]),第二个式子中的<code>sqrt(len * π)</code>却不是很懂其中的原理</p>
</blockquote>
<p>详细代码如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tagLen; i++) &#123;</div><div class="line">        <span class="comment">// 设置随机坐标，平均分布</span></div><div class="line">        <span class="keyword">let</span> a = <span class="built_in">Math</span>.acos((<span class="number">2</span> * (i + <span class="number">1</span>) - <span class="number">1</span>) / tagLen - <span class="number">1</span>), <span class="comment">// θ = arccos(((2*(i+1))-1)/len - 1),基于[-1,1]的关于0对称的等差数列</span></div><div class="line">          b = a * <span class="built_in">Math</span>.sqrt(tagLen * <span class="built_in">Math</span>.PI), <span class="comment">// Φ = θ*sqrt(all * π)，不懂原理</span></div><div class="line">          x = R * <span class="built_in">Math</span>.sin(a) * <span class="built_in">Math</span>.cos(b), <span class="comment">// x轴坐标: x=r*sinθ*cosΦ，详情请参考https://zh.wikipedia.org/wiki/%E7%90%83%E5%BA%A7%E6%A8%99%E7%B3%BB</span></div><div class="line">          y = R * <span class="built_in">Math</span>.sin(a) * <span class="built_in">Math</span>.sin(b), <span class="comment">// y轴坐标: x=r*sinθ*cosΦ</span></div><div class="line">          z = R * <span class="built_in">Math</span>.cos(a), <span class="comment">// z轴坐标: z=r*cosθ</span></div><div class="line">          t = <span class="keyword">new</span> tag(tagEle[i], x, y, z);</div><div class="line"></div><div class="line">        tagEle[i].style.color = <span class="string">'#'</span> + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>).toString(<span class="number">16</span>); <span class="comment">// 设置随机颜色</span></div><div class="line">        tags.push(t);</div><div class="line">        t.move(); <span class="comment">// 初始化位置</span></div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>先前已经说明了思路，现在就直接post上代码吧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotateX</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">let</span> cos = <span class="built_in">Math</span>.cos(angleX),</div><div class="line">        sin = <span class="built_in">Math</span>.sin(angleX);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;tags.length;i++)&#123;</div><div class="line">      	<span class="keyword">let</span> y = tags[i].y * cos - tags[i].z * sin,</div><div class="line">          z = tags[i].z * cos + tags[i].y * sin;</div><div class="line">        tags[i].y = y;</div><div class="line">        tags[i].z = z;</div><div class="line">      &#125;        </div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>其中angleX和angleY是旋转角速度的，可按需求设置，<strong>注意</strong> 在单位时间内<code>v=w*r</code>，且旋转360度跟没旋转的效果一样。</p>
<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">tag.prototype = &#123;</div><div class="line">      <span class="attr">move</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> scale = length / (length - <span class="keyword">this</span>.z),</div><div class="line">          alpha = (<span class="keyword">this</span>.z + R) / (<span class="number">2</span> * R),</div><div class="line">          ele = <span class="keyword">this</span>.ele;</div><div class="line">        ele.style.fontSize = <span class="number">15</span> * scale + <span class="string">"px"</span>;</div><div class="line">        ele.style.opacity = alpha + <span class="number">0.5</span>;</div><div class="line">        ele.style.zIndex = <span class="built_in">parseInt</span>(scale * <span class="number">100</span>);</div><div class="line">        <span class="comment">// 原点是 (cloud.offsetWidth/2, cloud.offsetHeight/2)</span></div><div class="line">        ele.style.left = <span class="keyword">this</span>.x + board.offsetWidth / <span class="number">2</span> - ele.offsetWidth / <span class="number">2</span> + <span class="string">"px"</span>;</div><div class="line">        ele.style.top = <span class="keyword">this</span>.y + board.offsetHeight / <span class="number">2</span> - ele.offsetHeight / <span class="number">2</span> + <span class="string">"px"</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>scale,alpha都是取关于z坐标递增的函数，用于设置<code>font-size</code>，<code>opacity</code>与<code>z-index</code>为了能够更好地形成视觉差(3d效果)，可按需设置！</p>
<p><a href="https://leocecilia.github.io/resume/">预览</a></p>
<p>参考链接 <a href="http://www.cnblogs.com/axes/p/3501424.html" target="_blank" rel="external">3dtagCloud</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Trip Of D3.js]]></title>
      <url>https://leocecilia.github.io/2017/03/11/trip%20of%20d3.js/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从freecodecamp中得知了d3.js,在<a href="d3js.org">官网</a>上看到了那么多高大上的例子，不禁想要多加了解它</p>
<h2 id="d3-js介绍"><a href="#d3-js介绍" class="headerlink" title="d3.js介绍"></a>d3.js介绍</h2><ul>
<li><p>D3.js是一套javaScript函数库，包含一整组操纵画图很好的辅助工具，还有很方便element操作模型</p>
</li>
<li><p>需掌握javascript,html和css与svg</p>
</li>
</ul>
<hr>
<p>废话不多说，先上例子(用d3的3.5.3版本)</p>
<hr>
<h3 id="柱形图"><a href="#柱形图" class="headerlink" title="柱形图"></a>柱形图</h3><ul>
<li><a href="https://www.freecodecamp.com/challenges/visualize-data-with-a-bar-chart" target="_blank" rel="external">Visualize Data with a Bar Chart</a></li>
<li><a href="https://codepen.io/leoCecilia/pen/QpKebr" target="_blank" rel="external">作品</a></li>
</ul>
<h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = chart.data;</div><div class="line">      d3.select(<span class="string">'#note'</span>).text(chart.description);</div><div class="line">      barWidth = <span class="built_in">Math</span>.ceil(width / data.length);</div><div class="line">      minDate = <span class="keyword">new</span> <span class="built_in">Date</span>(chart.from_date);</div><div class="line">      maxDate = <span class="keyword">new</span> <span class="built_in">Date</span>(chart.to_date);</div><div class="line">      <span class="keyword">var</span> margin = &#123;</div><div class="line">          <span class="attr">top</span>: <span class="number">5</span>,</div><div class="line">          <span class="attr">right</span>: <span class="number">10</span>,</div><div class="line">          <span class="attr">bottom</span>: <span class="number">30</span>,</div><div class="line">          <span class="attr">left</span>: <span class="number">75</span></div><div class="line">        &#125;,</div><div class="line">        width = <span class="number">1000</span> - margin.left - margin.right, <span class="comment">//所有小矩形所占用的宽度</span></div><div class="line">        height = <span class="number">500</span> - margin.top - margin.bottom,<span class="comment">//小矩形最大的高度</span></div><div class="line">        barWidth = <span class="built_in">Math</span>.ceil(width / data.length);</div></pre></td></tr></table></figure>
<h4 id="设置svg画布"><a href="#设置svg画布" class="headerlink" title="设置svg画布"></a>设置svg画布</h4><ul>
<li>为了改变轴相对于基址图的位置，可以指定g元素上的 transform 变换属性,此处改变的是svg图</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chart = d3.select(<span class="string">'#chart'</span>).attr(<span class="string">"width"</span>, width + margin.left + margin.right).attr(<span class="string">"height"</span>, height + margin.top + margin.bottom).append(<span class="string">'g'</span>).attr(<span class="string">'transform'</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</div></pre></td></tr></table></figure>
<h4 id="坐标轴渲染"><a href="#坐标轴渲染" class="headerlink" title="坐标轴渲染"></a>坐标轴渲染</h4><ul>
<li>先定义x,y轴比例尺，本例使用<code>d3.time.scale()</code>[日期比例尺]与<code>d3.scale.linear()</code>[线性比例尺],然后再设置范围和定义域,<strong>注意：svg的x,y轴的方向是由左上角向右与下延伸</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = d3.time.scale().domain([minDate, maxDate]).range([<span class="number">0</span>, width]);<span class="comment">//d3.time必须传入Date对象</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> y = d3.scale.linear().range([height, <span class="number">0</span>]).domain([<span class="number">0</span>, d3.max(data, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> d[<span class="number">1</span>];<span class="comment">//注意range([height,0])</span></div><div class="line">&#125;)]);</div></pre></td></tr></table></figure>
<ul>
<li>x,y轴的渲染设置，<code>d3.svg.axis.scale()</code>是将比例尺应用在坐标轴上，<code>orient()</code>指刻度的方向，<code>ticks()</code>刻度出现的频率,而<code>ticks(d3.time.year,5)</code>指的是每5年一个刻度,同样的代表时间的还有<code>d3.time.minute</code>/<code>d3.time.seconds</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis().scale(x).orient(<span class="string">'bottom'</span>).ticks(d3.time.year, <span class="number">5</span>),</div><div class="line"></div><div class="line">yAxis = d3.svg.axis().scale(y).orient(<span class="string">'left'</span>).ticks(<span class="number">10</span>, <span class="string">""</span>)<span class="comment">//ticks(10)表示将y值刻度分成10份</span></div></pre></td></tr></table></figure>
<ul>
<li>渲染x,y轴，<code>attr(y,)</code>表示相对于svg坐标y轴的位置，而<code>attr(dy,)</code>是偏离于y的值其中<code>attr(&#39;tranform&#39;,&#39;translate(left,top)&#39;)</code>是偏离(x,y)当前位置，然后<code>call()</code>相应的坐标轴渲染设置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//x轴</span></div><div class="line">chart.append(<span class="string">"g"</span>).attr(<span class="string">"class"</span>, <span class="string">"x axis"</span>).attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>).call(xAxis);</div><div class="line"></div><div class="line"><span class="comment">//y轴</span></div><div class="line">chart.append(<span class="string">"g"</span>).attr(<span class="string">"class"</span>, <span class="string">"y axis"</span>).call(yAxis).append(<span class="string">'text'</span>).attr(<span class="string">'transform'</span>, <span class="string">"rotate(-90)"</span>).attr(<span class="string">'y'</span>, <span class="number">6</span>).attr(<span class="string">'dy'</span>, <span class="string">'0.8em'</span>).style(<span class="string">'text-anchor'</span>, <span class="string">'end'</span>).text(<span class="string">"Gross Domestic Product, USA"</span>);<span class="comment">//style('text-anchor','end')表示在尾部对齐，添加单位可直接append('text')并做出相对应的位置偏移即可</span></div></pre></td></tr></table></figure>
<h4 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h4><ul>
<li>设置选择器,此处通过append(‘rect’)来画矩形图</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chart.selectAll(<span class="string">".bar"</span>).data(data).enter().append(<span class="string">"rect"</span>).attr(<span class="string">"class"</span>, <span class="string">"bar"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>设置矩形具体信息</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">d3.selectAll(<span class="string">'.bar'</span>).attr(<span class="string">'x'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="comment">//x坐标</span></div><div class="line">        <span class="keyword">return</span> x(<span class="keyword">new</span> <span class="built_in">Date</span>(d[<span class="number">0</span>]));</div><div class="line">      &#125;).attr(<span class="string">'y'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="comment">//y坐标</span></div><div class="line">        <span class="keyword">return</span> y(<span class="keyword">new</span> <span class="built_in">Date</span>(d[<span class="number">1</span>]));</div><div class="line">      &#125;).attr(<span class="string">'height'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> height - y(d[<span class="number">1</span>]); <span class="comment">//svg的y坐标是在左边且往下</span></div><div class="line">      &#125;).attr(<span class="string">'width'</span>, barWidth);</div></pre></td></tr></table></figure>
<ul>
<li>为其绑定事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = d3.select(<span class="string">'.container'</span>).append(<span class="string">'div'</span>).attr(<span class="string">'class'</span>, <span class="string">'title'</span>).style(<span class="string">'opacity'</span>, <span class="number">0</span>);<span class="comment">//小矩形信息</span></div><div class="line"></div><div class="line">d3.selectAll(<span class="string">'.bar'</span>).on(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> rect = d3.select(<span class="keyword">this</span>);</div><div class="line">        rect.attr(<span class="string">"class"</span>, <span class="string">"mousehover"</span>);</div><div class="line">        <span class="keyword">var</span> currentDate = <span class="keyword">new</span> <span class="built_in">Date</span>(d[<span class="number">0</span>]),</div><div class="line">          year = currentDate.getFullYear(),</div><div class="line">          month = currentDate.getMonth(),</div><div class="line">          dollars = d[<span class="number">1</span>];</div><div class="line">        div.transition().duration(<span class="number">200</span>).style(<span class="string">"opacity"</span>, <span class="number">0.9</span>);<span class="comment">//动画，duration表示变化时间</span></div><div class="line">        div.html(<span class="string">"&lt;span class = 'tip'&gt;"</span> + formatCurrency(dollars) + <span class="string">"&amp;nbsp;Billion &lt;/span&gt;&lt;br&gt;&lt;span class = 'year'&gt;"</span> + year + <span class="string">' - '</span> + Months[month] + <span class="string">'&lt;/span&gt;'</span>)</div><div class="line">          .style(<span class="string">'left'</span>, (d3.event.pageX + <span class="number">5</span>) + <span class="string">'px'</span>)<span class="comment">//d3.event.pageX是svg(position X)</span></div><div class="line">          .style(<span class="string">'top'</span>, (d3.event.pageY - <span class="number">50</span>) + <span class="string">'px'</span>); </div><div class="line">      &#125;).on(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> rect = d3.select(<span class="keyword">this</span>);</div><div class="line">        rect.attr(<span class="string">'class'</span>, <span class="string">'mouseoff'</span>);</div><div class="line">        div.transition().duration(<span class="number">500</span>).style(<span class="string">'opacity'</span>, <span class="number">0</span>);</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<hr>
<h3 id="散布图"><a href="#散布图" class="headerlink" title="散布图"></a>散布图</h3><ul>
<li><a href="https://www.freecodecamp.com/challenges/visualize-data-with-a-scatterplot-graph" target="_blank" rel="external">Visualize Data with a Scatterplot Graph</a></li>
<li><a href="https://codepen.io/leoCecilia/pen/vxywqQ" target="_blank" rel="external">作品</a></li>
</ul>
<p>此处便只post上与柱形图不同的核心代码</p>
<h4 id="绘制比例尺"><a href="#绘制比例尺" class="headerlink" title="绘制比例尺"></a>绘制比例尺</h4><ul>
<li>由于x轴单位为Minutes Behind Fastest Time，而date对象中并没有直接地对分钟的提取，故需要使用<code>tickFormat()</code>函数来设置刻度格式，事实上，在此时，ticks指定的参数也要传递给<code>scale.tickFormat</code>方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> convertTime = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;<span class="comment">//按min:sec显示</span></div><div class="line">    <span class="keyword">var</span> sec = s%<span class="number">60</span>,min = (s-sec)/<span class="number">60</span>;</div><div class="line">    sec = (sec&lt;<span class="number">10</span>)? <span class="string">'0'</span> + sec : sec;</div><div class="line">    <span class="keyword">return</span> min + <span class="string">':'</span> + sec;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis().scale(x).orient(<span class="string">'bottom'</span>).tickFormat(convertTime), <span class="comment">//x轴</span></div><div class="line">    yAxis = d3.svg.axis().scale(y).orient(<span class="string">'left'</span>);</div><div class="line"></div><div class="line">	<span class="comment">//x轴绘制</span></div><div class="line">    svg.append(<span class="string">'g'</span>) </div><div class="line">        .attr(<span class="string">'class'</span>, <span class="string">'x axis'</span>)</div><div class="line">        .attr(<span class="string">'transform'</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</div><div class="line">        .call(xAxis)</div><div class="line">        .append(<span class="string">'text'</span>)</div><div class="line">        .attr(<span class="string">'class'</span>, <span class="string">'label'</span>)</div><div class="line">        .attr(<span class="string">'x'</span>, width)</div><div class="line">        .attr(<span class="string">'y'</span>, <span class="number">-6</span>)</div><div class="line">        .style(<span class="string">'text-anchor'</span>, <span class="string">'end'</span>)</div><div class="line">        .text(<span class="string">'Minutes Behind Fastest Time'</span>);</div><div class="line">		</div><div class="line">	   <span class="comment">//y轴绘制</span></div><div class="line">      svg.append(<span class="string">'g'</span>) </div><div class="line">        .attr(<span class="string">'class'</span>, <span class="string">'y axis'</span>)</div><div class="line">        .call(yAxis)</div><div class="line">        .append(<span class="string">'text'</span>)<span class="comment">//添加y轴单位</span></div><div class="line">        .attr(<span class="string">'class'</span>, <span class="string">'label'</span>)</div><div class="line">        .attr(<span class="string">'transform'</span>, <span class="string">'rotate(-90)'</span>)</div><div class="line">        .attr(<span class="string">'y'</span>, <span class="number">6</span>)</div><div class="line">        .attr(<span class="string">'dy'</span>, <span class="string">'.8em'</span>)</div><div class="line">        .style(<span class="string">'text-anchor'</span>, <span class="string">'end'</span>)</div><div class="line">        .text(<span class="string">'Ranking'</span>);</div></pre></td></tr></table></figure>
<h4 id="画图-1"><a href="#画图-1" class="headerlink" title="画图"></a>画图</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">svg.selectAll(<span class="string">'.dot'</span>)<span class="comment">//此处若无该选择器，则返回一个空选择器</span></div><div class="line">        .data(data)</div><div class="line">        .enter().append(<span class="string">'circle'</span>)</div><div class="line">        .attr(<span class="string">'class'</span>, <span class="string">'dot'</span>)</div><div class="line">        .attr(<span class="string">'cx'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> x(d.Seconds - minTime);</div><div class="line">       &#125;)</div><div class="line">        .attr(<span class="string">'cy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> y(d.Place);</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">'r'</span>, <span class="number">3.5</span>)</div><div class="line">        .style(<span class="string">'fill'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (d.Doping === <span class="string">''</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'#035'</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> <span class="string">'#EB3349'</span>;</div><div class="line">        &#125;).on(<span class="string">'mouseover'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> circle = d3.select(<span class="keyword">this</span>);</div><div class="line">          circle.attr(<span class="string">'class'</span>,<span class="string">'mouseover'</span>);</div><div class="line">          div.html(<span class="string">'&lt;span class = "des" &gt;'</span>+<span class="string">'name: '</span>+d.Name+<span class="string">' Nationality: '</span>+d.Nationality+<span class="string">'&lt;/span&gt;&lt;br&gt;&lt;span class = "doping"&gt;'</span>+<span class="string">'Doping:'</span>+d.Doping+<span class="string">'&lt;/span&gt;'</span>+<span class="string">'&lt;br&gt;'</span>+<span class="string">'&lt;span class = "URL"&gt;'</span>+<span class="string">'URL'</span>+d.URL+<span class="string">'&lt;/span&gt;'</span>)</div><div class="line">          .style(<span class="string">'left'</span>,width /<span class="number">2</span> +<span class="string">'px'</span>).style(<span class="string">'top'</span>, height*<span class="number">0.8</span>+<span class="string">'px'</span>).style(<span class="string">'opacity'</span>,<span class="number">1</span>);</div><div class="line">        &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> circle = d3.select(<span class="keyword">this</span>);</div><div class="line">          circle.attr(<span class="string">'class'</span>,<span class="string">'mouseoff'</span>);</div><div class="line">          div.style(<span class="string">'opacity'</span>,<span class="number">0</span>);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<hr>
<h3 id="热图"><a href="#热图" class="headerlink" title="热图"></a>热图</h3><ul>
<li><a href="https://www.freecodecamp.com/challenges/visualize-data-with-a-heat-map" target="_blank" rel="external">Visualize Data with a Heat Map</a></li>
<li><a href="https://codepen.io/leoCecilia/pen/qrRKqq" target="_blank" rel="external">作品</a></li>
</ul>
<blockquote>
<p>分析：本例使用的<code>d3.json()</code>来获取数据,凡是画图表，重中之重仍是比例尺的绘制。现在让我们来分析一下如何绘制该比例尺吧。<br>首先是x轴的绘制,此处与我们上述的代码都相似</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = d3.time.scale().domain([minYear, maxYear]).range([<span class="number">0</span>, width]),<span class="comment">//必须使用date对象传入</span></div><div class="line">    xAxis = d3.svg.axis().scale(x).orient(<span class="string">'bottom'</span>).ticks(d3.time.years, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>然后便是monthLabel的设置，它的方位是在y轴位置，但此处无需按照我们先前设置比例尺后，再绘制坐标轴，因为无需显示刻度线。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> monLabels = svg.selectAll(<span class="string">'.monthLabel'</span>).data(Months).enter().append(<span class="string">'text'</span>)</div><div class="line">      .attr(<span class="string">'class'</span>,<span class="string">'monthLabel'</span>)</div><div class="line">      .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d;</div><div class="line">      &#125;)</div><div class="line">      .attr(<span class="string">'x'</span>, <span class="number">0</span>)</div><div class="line">      .attr(<span class="string">'y'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> i * gridHeight+gridHeight/<span class="number">2</span>;</div><div class="line">      &#125;)</div><div class="line">      .style(<span class="string">'text-anchor'</span>, <span class="string">'end'</span>)</div><div class="line">      .attr(<span class="string">'transform'</span>, <span class="string">'translate(-6,'</span>+gridWidth/<span class="number">1.5</span>+<span class="string">')'</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>自定义颜色比例尺，该比例尺乃是热图的特点，通过自定义颜色来确定温度的范围，让数据瞬间一目了然。<br>此处需要用到<code>d3.scale.quantile()</code><a href="适用于定义域是连续的，值域是离散的数据">量化比例尺</a>，定义域是用于可视化的数据维度，值域则是输出的可视化维度，用在此处便恰当好处。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colorScale = d3.scale.quantile()</div><div class="line">    .domain([minVariance + baseTem, maxVariance + baseTem]).range(colors);</div><div class="line"></div><div class="line"><span class="keyword">var</span> dataPicker = svg.selectAll(<span class="string">'.dataset-button'</span>)</div><div class="line">      .data(colorScale.quantiles());</div><div class="line"></div><div class="line">    <span class="comment">//rect</span></div><div class="line">    dataPicker.enter().append(<span class="string">'g'</span>).attr(<span class="string">'class'</span>, <span class="string">'dataPicker'</span>)</div><div class="line">      .append(<span class="string">'rect'</span>)</div><div class="line">      .attr(<span class="string">'x'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> legendElementWidth * i + (width - legendElementWidth * buckets)+<span class="number">8</span>;</div><div class="line">      &#125;)</div><div class="line">      .attr(<span class="string">'y'</span>, height + <span class="number">50</span>)</div><div class="line">      .attr(<span class="string">'width'</span>, legendElementWidth)</div><div class="line">      .attr(<span class="string">'height'</span>, gridHeight / <span class="number">2</span>)</div><div class="line">      .style(<span class="string">'fill'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> colors[i];</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//text</span></div><div class="line">    dataPicker.append(<span class="string">'text'</span>)</div><div class="line">      .attr(<span class="string">'class'</span>, <span class="string">'scales'</span>)</div><div class="line">      .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(d*<span class="number">10</span>)/<span class="number">10</span>;</div><div class="line">      &#125;)</div><div class="line">      .attr(<span class="string">'x'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> legendElementWidth * i + (width - legendElementWidth * buckets);</div><div class="line">      &#125;)</div><div class="line">      .attr(<span class="string">'y'</span>, height + <span class="number">50</span> + gridHeight)</div><div class="line">      .style(<span class="string">'text-anchor'</span>,<span class="string">'center'</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>然后便开始画图了，注意<code>d3.event.pageX</code>表示当前交互物件相对于svg的坐标</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> temps = svg.selectAll(<span class="string">'.years'</span>).data(dataTem)</div><div class="line">      .enter().append(<span class="string">'rect'</span>).attr(<span class="string">'class'</span>,<span class="string">'years'</span>)</div><div class="line">      .attr(<span class="string">'x'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;<span class="comment">//此处也可使用x(new Date(d.year,0))来获得x属性值</span></div><div class="line">        <span class="keyword">return</span> ((d.year - lowYear)*gridWidth);</div><div class="line">      &#125;)</div><div class="line">      .attr(<span class="string">'y'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((d.month - <span class="number">1</span>) * gridHeight);</div><div class="line">      &#125;)</div><div class="line">      .attr(<span class="string">'rx'</span>, <span class="number">0</span>)</div><div class="line">      .attr(<span class="string">'ry'</span>, <span class="number">0</span>)</div><div class="line">      .attr(<span class="string">'width'</span>, gridWidth)</div><div class="line">      .attr(<span class="string">'height'</span>, gridHeight)</div><div class="line">      .style(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> colorScale(d.variance + baseTem);</div><div class="line">     &#125;).on(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        div.transition().duration(<span class="number">100</span>).style(<span class="string">'opacity'</span>, <span class="number">0.8</span>);</div><div class="line">        div.html(<span class="string">'&lt;span class = "year"&gt;'</span> + d.year + <span class="string">'&lt;/span&gt;'</span> + <span class="string">' - '</span> + <span class="string">'&lt;span class = "month"&gt;'</span> + Months[d.month - <span class="number">1</span>] + <span class="string">'&lt;/span&gt;&lt;br&gt;&lt;span class = "temp"&gt;'</span> + formatTem(d.variance + baseTem) + <span class="string">'&amp;#8451'</span> + <span class="string">'&lt;/span&gt;&lt;br&gt;&lt;span class = "variance"&gt;'</span> + d.variance + <span class="string">'&amp;#8451'</span> + <span class="string">'&lt;/span&gt;'</span>)</div><div class="line">          .style(<span class="string">'left'</span>, d3.event.pageX - $(<span class="string">'.tooltip'</span>).width() / <span class="number">2</span> + <span class="string">'px'</span>)</div><div class="line">          .style(<span class="string">'top'</span>, d3.event.pageY - <span class="number">80</span> + <span class="string">'px'</span>);</div><div class="line">      &#125;).on(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        div.transition().duration(<span class="number">200</span>).style(<span class="string">'opacity'</span>, <span class="number">0</span>);</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<hr>
<h3 id="力导学图"><a href="#力导学图" class="headerlink" title="力导学图"></a>力导学图</h3><p>这时候我需要介绍一种关于d3的力导学图布局给大家，<code>d3.layout.force()</code>,力导学图可以反映事物之间的关系，下面以国家间的关系为例。<br><a href="https://www.freecodecamp.com/challenges/show-national-contiguity-with-a-force-directed-graph" target="_blank" rel="external"><br>Show National Contiguity with a Force Directed Graph</a><br><a href="http://codepen.io/leoCecilia/pen/dvvmZj?editors=0010" target="_blank" rel="external">作品</a><br>现在让我来说一下思路</p>
<ul>
<li>布局(数据转换)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> force = d3.layout.force()</div><div class="line">      .nodes(nodes) <span class="comment">//指定节点数组</span></div><div class="line">      .links(edges) <span class="comment">//指定连线数组</span></div><div class="line">      .size([width,height]) <span class="comment">//指定作用域范围</span></div><div class="line">      .linkDistance(<span class="number">150</span>) <span class="comment">//指定连线长度</span></div><div class="line">      .charge([<span class="number">-400</span>]); <span class="comment">//相互之间的作用力</span></div></pre></td></tr></table></figure>
<ul>
<li>使力学作用作用生效</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">force.start();<span class="comment">//开始作用</span></div></pre></td></tr></table></figure>
<ul>
<li>绘制<ul>
<li>line 线段</li>
<li>circle 节点</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制line</span></div><div class="line"><span class="keyword">var</span> svg_edges = svg.selectAll(<span class="string">'.line'</span>).data(edges).enter().append(<span class="string">'line'</span>).attr(<span class="string">'class'</span>,<span class="string">'line'</span>);</div><div class="line">    </div><div class="line"><span class="comment">//绘制节点</span></div><div class="line">    <span class="keyword">var</span> svg_nodes = d3.select(<span class="string">'#chart'</span>).select(<span class="string">'#flagbox'</span>).selectAll(<span class="string">'.node'</span>).data(nodes).enter().append(<span class="string">'img'</span>)</div><div class="line">    .attr(<span class="string">'class'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'flag flag-'</span>+d.code;</div><div class="line">    &#125;).on(<span class="string">'mouseover'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">      toolTip.style(<span class="string">'opacity'</span>,<span class="number">1</span>);</div><div class="line">      toolTip.html(d.country).style(<span class="string">'left'</span>,d3.event.pageX+<span class="string">'px'</span>).style(<span class="string">'top'</span>,(d3.event.pageY<span class="number">-28</span>)+<span class="string">'px'</span>);</div><div class="line">    &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">      toolTip.style(<span class="string">'opacity'</span>,<span class="number">0</span>);</div><div class="line">    &#125;).call(force.drag);<span class="comment">//使得节点能够拖动</span></div></pre></td></tr></table></figure>
<ul>
<li>更新节点和连线位置(因为力导向图是时刻变化的，重中之重)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">force.on(<span class="string">'tick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">//更新连线坐标</span></div><div class="line">      svg_edges.attr(<span class="string">'x1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d.source.x;</div><div class="line">      &#125;).attr(<span class="string">'y1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d.source.y;</div><div class="line">      &#125;).attr(<span class="string">'x2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d.target.x;</div><div class="line">      &#125;).attr(<span class="string">'y2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> d.target.y;</div><div class="line">      &#125;);</div><div class="line">      </div><div class="line">      <span class="comment">//更新节点坐标,需稍微改变各节点坐标，动态显示</span></div><div class="line">      svg_nodes.style(<span class="string">'left'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(d.x<span class="number">-8</span>&gt;<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> (d.x<span class="number">-8</span>)+<span class="string">'px'</span>;</div><div class="line">      &#125;).style(<span class="string">'top'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> (d.y<span class="number">-5</span>)+<span class="string">'px'</span>;</div><div class="line">      &#125;);</div><div class="line">            </div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<hr>
<h3 id="效果示例"><a href="#效果示例" class="headerlink" title="效果示例"></a>效果示例</h3><ul>
<li>柱形图</li>
</ul>
<p></p><p data-height="265" data-theme-id="dark" data-slug-hash="QpKebr" data-default-tab="js,result" data-user="leoCecilia" data-embed-version="2" data-pen-title=" Visualize Data with a Bar Chart" class="codepen">See the Pen <a href="https://codepen.io/leoCecilia/pen/QpKebr/" target="_blank" rel="external"> Visualize Data with a Bar Chart</a> by vivian (<a href="http://codepen.io/leoCecilia" target="_blank" rel="external">@leoCecilia</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<ul>
<li>散布图</li>
</ul>
<p></p><p data-height="265" data-theme-id="dark" data-slug-hash="vxywqQ" data-default-tab="js,result" data-user="leoCecilia" data-embed-version="2" data-pen-title="Visualize Data with a Scatterplot Graph" class="codepen">See the Pen <a href="https://codepen.io/leoCecilia/pen/vxywqQ/" target="_blank" rel="external">Visualize Data with a Scatterplot Graph</a> by vivian (<a href="http://codepen.io/leoCecilia" target="_blank" rel="external">@leoCecilia</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<ul>
<li>热点图</li>
</ul>
<p></p><p data-height="265" data-theme-id="dark" data-slug-hash="qrRKqq" data-default-tab="js,result" data-user="leoCecilia" data-embed-version="2" data-pen-title="Visualize Data with a Heat Map" class="codepen">See the Pen <a href="https://codepen.io/leoCecilia/pen/qrRKqq/" target="_blank" rel="external">Visualize Data with a Heat Map</a> by vivian (<a href="http://codepen.io/leoCecilia" target="_blank" rel="external">@leoCecilia</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<ul>
<li>力导向图</li>
</ul>
<p></p><p data-height="265" data-theme-id="dark" data-slug-hash="dvvmZj" data-default-tab="js,result" data-user="leoCecilia" data-embed-version="2" data-pen-title="Force Directed Graph" class="codepen">See the Pen <a href="http://codepen.io/leoCecilia/pen/dvvmZj/" target="_blank" rel="external">Force Directed Graph</a> by vivian (<a href="http://codepen.io/leoCecilia" target="_blank" rel="external">@leoCecilia</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[currently thinking]]></title>
      <url>https://leocecilia.github.io/2017/03/06/currently-thinking/</url>
      <content type="html"><![CDATA[<h2 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h2><p>我们宿舍开了一个小会，目的是为了让我们宿舍能够继续和睦相处。小A说我生活习惯有些随便，导致她东西的生命周期缩短</p>
<h3 id="自述"><a href="#自述" class="headerlink" title="自述"></a>自述</h3><p>我确实以为有时候集体生活，有些资源是可以共用的，因此我便没有询问对方的意见，不问自取，此确实是我的不对。对方的处理让我觉得很是尴尬，并不是说人家冤枉了我什么的，也不是说我有错不认，而是她并没有事先跟我说清你我的矛盾，却先跟其他舍友说此事，然后说还开个小会。其他人都在不好意思地笑着。。。噢，对啊，原来她们竟是不好意思地笑着。是啊，小B和小C想必也早就不满我不问自取之恶习，而小D也最是反感这种恶习的。哪怕是最微末的事情，长期以来，也是很消磨人的意志的吧，只是碍于舍友情谊，不方便明说罢了。如此说来小A倒是成为了代表者来开会说明她们对我的不满啊，而我竟误以为她。。。原来根源是出于己身啊！</p>
<h2 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h2><p>我男友召集他的初中同学来华农游玩，并且也让他们看一下他们的大嫂（然而我心理是不承认的，明明只是女朋友嘛！！！总觉得叫我大嫂会将我说的很老的感觉）。他让我做他们的导游，可是在那一刻我竟不知道该说啥，内心也有一些局促不安，后来他还是承接了自己的话题。。。 到后来，大多数情况下也是他跟他们聊天，游玩结束之后，他问我为什么那么不自信呢，是因为不熟悉嘛</p>
<h3 id="自述-1"><a href="#自述-1" class="headerlink" title="自述"></a>自述</h3><p>我竟没感觉我那是不自信，可是一时间让我做导游，我也确实是脑袋空白了，不知该说什么啊。思前想后，忽然想起我大一的时候却也不是如此，大一是会很热衷于结交新朋友，且令人感觉易聊随和，可是自从我有了男朋友之后，我却似乎又慢慢变回我初时的模样，腼腆，不太爱说话。想来是因为我已经依赖于他了。嗯，感觉很多时候都是这个样子哎，很多时候，在他面前，我都像一个诸事不晓的傻白甜。哦，这是一个不太美好的征兆。回想起我以前和晖皓一起相处的时候(朋友)亦是如此！渐渐地我便不会展露自己，不会表达自己。如果不及时意识到，并且充实自己的话，那我可能便永远跳不出自己的圈子了。没错，当我恋爱时，我应仍是单身，不过分依赖对方，而更应该培养独立意识，否则当他离开之时，我便可能只剩下躯壳，恋爱应该是使人变得更加美好的，在此过程中，双方共同成长！而若是没有了恋爱，我也应自给自足，能够养活自己！此乃吾现时之目标。对了，最近才发现我大腿又粗了些许，是该减肥了，做一个更美好的自己！</p>
<h2 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h2><p>深夜失眠，便开始思考最近的所闻所见，忽然发现自己有很多不美好的地方，比如说，之前我男朋友因为我的原因丢了手机，可是我没有和他一起解决这个问题啊，于是他问他兄弟借钱，然后自己揽下大堆兼职，感觉很累的样子。可是我却没跟他一起分担啊，然后就挺恼自己的。后来去长隆时候，他恐高嘛，然后我觉得我好没有义气，就这么扔下他自己去玩了，可是那时候我也好不开心，因为我不知道该怎么给予他勇气，反而还让他更胆怯了，可是每当我无助之时，他却总会出现。于是昨晚我便感觉更加难过了，然后我就下床去写随笔，因为心里堵的慌，也睡不着！后来梳理自己的思绪的时候啊，原来很多时候我都依赖他，然后不仅导致我疏远了我舍友和我们班的同学，更是减退了我先前热衷结交小伙伴的热情啊，还有其他的一些东西。 我之前看了一篇文章，它的标题是我恋爱了，但我仍然单身。后来嘛，我跟他说了昨晚的事情，问他你要看我的随笔嘛。</p>
<blockquote>
<p>他说随笔怎么可以随便给别人看呢，那是最私人的东西，只能你自己拥有啊，你得留一片独属于你自己的空间在你心中啊。</p>
</blockquote>
<p>然后我心中一颤。<strong>是啊，不管任何时候都要做一个有独立思想的人，这样，才不会受控于他人啊。又或许说，即便他将来真的离开了我，我也依旧能够向着自己的目标前行！</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[市井讲价之心理拉锯战]]></title>
      <url>https://leocecilia.github.io/2017/03/04/learn-of-city/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之所以会发出这篇文章，是由于昨天与男友买衣服所收到的启发</p>
<hr>
<h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><p>我们进入了一家装饰风格略显 <strong>拘束</strong>的小店中，略微询问了下价格，价格倒是便宜，摸上去材质却也是一般，想来其货色是较下层等次，拿了好几件衣服试穿，或许是因为我们本身比较旺场，店里客人接踵而来，于是我也不好意思继续占着更衣室，便退了出来，当我想要再试另外一件衣服之前，老板娘却<strong>黑着脸</strong>说，不用再试了，比比就知道好不好看啦。然后我们便甚为不爽，本想多买几件，现在居然还赶起人来了。最终不还是只有我们买下来了。</p>
<h3 id="场景1分析"><a href="#场景1分析" class="headerlink" title="场景1分析"></a>场景1分析</h3><p>其实由店中的装饰风格，便可看出，店家的度量与为人处事。当我们觉察到我们占用了店中的资源时，我们便很知趣的退了下来，然而当我们想要继续去试衣服时，这是无可厚非，因为这是公众场合，每个人都有机会去试衣间试穿衣服，然而她却只以为我们占着试衣间，就<strong>得失</strong>我们，却没看到我们也是潜在的客源，即便我们这次不买，若是试穿的高兴的话，也许下一次还会叫身边的人去买衣服呢。</p>
<h3 id="试衣感受"><a href="#试衣感受" class="headerlink" title="试衣感受"></a>试衣感受</h3><p>很不美好。当天我刚好来M，且试穿衣服亦是一件累人的活计，于是心情也便有些许不佳，再加上新买的鞋子穿进穿出很累人，到后来试穿裹胸的时候，我就觉得勒的很紧，所以就更郁闷啦，我就向我男友抱怨说我不喜欢这裹胸，他就笑着说，不要就不要嘛，怎么好像很委屈的样子。可是他还一直要找别的裹胸给我。</p>
<hr>
<h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><p>我们进入了一家装饰风格较为敞亮的店中，售货员是男的，练手之心便来了。如同上次一般，不久店内便有很多人到来，各式美女都在试穿着衣裳，忽觉做售货员也是一种美好的享受，能够看着各式美女展现出她们的苗条身材，视觉上的享受得以满足。一位美女在踌躇着挑选衣服，这时我男朋友便选了一件衣服给她，并说:”你看哈，如果把里面的衬衣稍微露出来一丢丢，让牛仔衣自然垂下，便会很好看的啦”，那美女便说:”好像是有那么点道理哦!<strong>这件多少钱</strong>啊。”我男友便笑了:”我不是售货员。” “你看我都帮你推销了，是不是要给我们打折啊。”男友说。这时美女也一起附和说:”得打八折。”然后我们便让那位美女先付账，然后我们再跟他展开拉锯大战。最后我们还是将价格讲到了自己目标的价位</p>
<h3 id="场景2分析"><a href="#场景2分析" class="headerlink" title="场景2分析"></a>场景2分析</h3><p>在此处，我掌握了一些讲价的策略。当一开始问价时，应先问其价，此时对方不会减太多，然后要表示出一脸嫌弃的模样，嫌贵，然后当对方问你想要多少钱时，不能<strong>立马</strong>将自己内心的价位告诉对方，而应先往下报价，此时对方肯定表示不行，铺租都不够了，然后我们再可以继续提价，但又不可提太多，得加一丢丢，显示自己很小气的样子，对方肯定仍不肯，这时便可出门走开，但要脚步放慢，表示出有回旋的余地。此时，对方肯定说，你得加，那么这个时候，我们就可以说，那就再加… 对方不肯，继续往前走，”好啦好啦，75，75就给你啦”。”我刚刚听到好像说60”;”不是65，65”，这样70收工。</p>
<hr>
<p>继续分析，首先砍一半价格是合理的，因为通常情况下，其开价后所赚到的利润是200%,接着逐渐展开拉锯之战，当对方以为砍下了25%价格，便以为交易能够达成，但是，你坚定自己立场，明确表态价格便该是这样子的。这个时候，他便会相对应的继续减价，因为生意总是要做的，当到他只能赚10多块钱的时候，要他出手，仍是有可能的，因为卖出总比放着，一直放着可能便会亏损，倒是卖出， <strong>不仅赚到薄利，更能赚到的是客源，其实很多人都看不到这一点</strong> 。我以薄利来赚取你的好感，从而你便会带你相熟之人继续去帮衬，从而源源不断。人与人之间的关系亦是如此。这个男售货员就不会得失顾客，首先就是给你一种很和善的感觉，而且还会适时给予你推荐搭配的建议。</p>
<h3 id="场景2试衣感受"><a href="#场景2试衣感受" class="headerlink" title="场景2试衣感受"></a>场景2试衣感受</h3><p>感觉好好玩哦，学到挺多心理策略，顾客就是上帝，前提还是要你略微估摸一下它的价格，不能随便砍价。</p>
<hr>
<h3 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h3><p>我们去到了一家很讲究整洁的小店，店家很认真的擦拭自己店门的玻璃，但是当我们问推荐衣服的时候，他却随便指了一件衣服给我们看，也没有说出怎么推荐搭配穿着的建议，结果觉得试衣扫兴，便就离开了。</p>
<h3 id="场景3分析"><a href="#场景3分析" class="headerlink" title="场景3分析"></a>场景3分析</h3><p>其实本来店家讲究简洁是一件好事情，但是呢，他却不会说话，没有去满足顾客的需求，并适时给予顾客建议。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>– 售货员角度：当你拿到中下等次的货色时，你不能得失顾客，得让顾客买的舒心，当你拿到较好等次的货色时，<strong>你得适当给予顾客一些穿衣打扮的建议，尤其是在其踌躇郁闷之时，给予他一声定锤，但是同时你不能将自己的意志凌驾于顾客至上</strong>，永远谨记顾客便是你的上帝。其实跟男友一起出去逛街，感受生活，这是一件十分有趣的事情，顾客与售货员之间的心理拉锯大战每日都在重演着，多点去感受生活，去真实的感受一下面对面的拉锯心理战，这便是人与人之间的关系缩影啊。</p>
<p>– 顾客角度：不要把自己的价位一开始便暴露给售货员，因为无论如何都要往上抬价，</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React学习之旅]]></title>
      <url>https://leocecilia.github.io/2017/03/02/learn-of-React/</url>
      <content type="html"><![CDATA[<h2 id="React介绍"><a href="#React介绍" class="headerlink" title="React介绍"></a>React介绍</h2><h3 id="认识误区"><a href="#认识误区" class="headerlink" title="认识误区"></a>认识误区</h3><ul>
<li><p>React不是完整的MVC框架，最多只是MVC中的V(view)，甚至React本身都不认可MVC开发模式</p>
</li>
<li><p>React并不是在任何情况下，都是性能最佳的框架，在有大量DOM改动的情况下，React的性能较差</p>
</li>
<li><p>React不是一个新的模板语言，JSX只是一个表象，没有JSX的React也能工作</p>
</li>
</ul>
<h3 id="React原理"><a href="#React原理" class="headerlink" title="React原理"></a>React原理</h3><ul>
<li>React 会完整的复制一份DOM Tree,然后通过标记dirty nodes 来找到真正重绘的Nodes。</li>
</ul>
<p>– eg.某个DOM被标记说要更新，那么它以下所有的subTree都要被调用<code>shouldComponentUpdate</code>。关键是从<code>setState</code>被触发后，其自身节点到其所有子节点都要被呼叫到<code>shouldComponentUpdate</code>,遍历所有节点的时间成本是很高的。</p>
<h3 id="React知识点"><a href="#React知识点" class="headerlink" title="React知识点"></a>React知识点</h3><ul>
<li><p><code>getDefaultProps</code>只在组件创建时调用一次并缓存对象(即在<code>React.createClass</code>之后就会调用)此方法不能以来<code>this</code>获得这个组件实例。使用ES6语法，直接定义<code>defaultProps</code>这个类属性来替代,<code>Temp.defaultProps = {initialCount: 0};</code></p>
</li>
<li><p><code>getInitialState</code>,初始化<code>this.state</code>的值，只在组件装载之前调用一次，若使用ES6语法，可在构造函数中初始状态</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Temp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">      <span class="keyword">super</span>(props);</div><div class="line">      <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</div><div class="line">   &#125;</div><div class="line">   render() &#123;</div><div class="line">  </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>render</code>必须用于生成此组件的HTML结构，可返回<code>null</code>或者<code>false</code>，这时候<code>ReactDOM.findDOMNode(tjos)</code>会返回<code>null</code></li>
</ul>
<h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><h3 id="装载组件触发"><a href="#装载组件触发" class="headerlink" title="装载组件触发"></a>装载组件触发</h3><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a><code>componentWillMount</code></h4><ul>
<li>只在装载之前调用一次，在<code>render</code>之前调用，可在这个方法调用<code>this.state</code>改变状态，此处不会额外调用<code>render</code></li>
</ul>
<h3 id="更新组件触发"><a href="#更新组件触发" class="headerlink" title="更新组件触发"></a>更新组件触发</h3><ul>
<li><code>componentWillReceiveProps</code></li>
<li><code>shouldComponentUpdate</code></li>
<li><p><code>shouldComponentUpdate(nextProps,nextState)</code><br>– 调用shouldComponentUpdate可以让React知道一个组件的输出是否会被当前状态或参数的改变而影响，默认的行为是在每一个状态改变后便重新渲染页面，而且在大多情况下需要依赖这个默认的行为。<br>当新的参数和状态被接收到时shouldComponentUpdate就会被调用。此方法不会在首次render或是forceUpdate在执行时被调用</p>
</li>
<li><p><code>componentWillUpdate</code></p>
</li>
<li><code>componentDidUpdate</code></li>
</ul>
<h3 id="卸载组件触发"><a href="#卸载组件触发" class="headerlink" title="卸载组件触发"></a>卸载组件触发</h3><ul>
<li><code>componentWillUnmount</code></li>
</ul>
<h3 id="React的核心"><a href="#React的核心" class="headerlink" title="React的核心"></a>React的核心</h3><ul>
<li><p>虚拟DOM，传统的diff(比较新DOM与虚拟DOM的差异，然后再加以渲染),但facebook工程师采用了更近大胆的策略，当然这必定有所牺牲</p>
</li>
<li><p>DOM节点跨层级少</p>
</li>
<li>组件，不同组件基本不同DOM，比较是否同一类型组件，若否，删除原有节点，新增整个组件下的子节点，若是，比较ELEMENT</li>
<li>同一层级的子节点，可用ID区分，然后根据节点ID，进行移位操作，得到如何修改，删除，新增</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[build the game of life]]></title>
      <url>https://leocecilia.github.io/2017/03/02/build-the-game-of-life/</url>
      <content type="html"><![CDATA[<h2 id="build-the-game-of-life-204"><a href="#build-the-game-of-life-204" class="headerlink" title="build the game of life(204)"></a><a href="https://www.freecodecamp.com/challenges/build-the-game-of-life" target="_blank" rel="external">build the game of life</a>(204)</h2><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://en.wikipedia.org/wiki/The_Game_of_Life" target="_blank" rel="external">game of life</a>(英文版)<br><a href="https://zh.wikipedia.org/zh-hans/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F" target="_blank" rel="external">康威生命游戏</a>(中文版)</p>
<hr>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ul>
<li>当前细胞为存活状态时，当周围低于2个（不包含2个）存活细胞时， 该细胞变成死亡状态。（模拟生命数量稀少）</li>
<li>当前细胞为存活状态时，当周围有2个或3个存活细胞时， 该细胞保持原样。<br>当前细胞为存活状态时，当周围有3个以上的存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</li>
<li>当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。 （模拟繁殖）</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="核心算法部分"><a href="#核心算法部分" class="headerlink" title="核心算法部分"></a>核心算法部分</h3><ul>
<li>创建一个2d数组来储存细胞</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">createGrid() &#123;</div><div class="line">    <span class="keyword">var</span> grid = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</div><div class="line">      <span class="keyword">var</span> row = [];</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">40</span>; j++) &#123;</div><div class="line">        <span class="keyword">var</span> random = <span class="built_in">Math</span>.random()/<span class="number">1</span>; <span class="comment">//简单的random算法，可百度</span></div><div class="line">        <span class="keyword">if</span> (random &lt; <span class="number">0.3</span>) &#123;</div><div class="line">          row.push(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          row.push(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      grid.push(row);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> grid;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>由规则可知，其主要难点是找出每个细胞的邻居总数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">calculateNeighbour(x,y) &#123;</div><div class="line">	<span class="comment">//注意25乃是arr.length;</span></div><div class="line">	<span class="comment">//40乃是arr[i].length;</span></div><div class="line">    <span class="keyword">let</span> topRow = x<span class="number">-1</span>&lt;<span class="number">0</span>?(<span class="number">25</span><span class="number">-1</span>):x<span class="number">-1</span>;</div><div class="line">    <span class="keyword">let</span> bottomRow = (x+<span class="number">1</span>===<span class="number">25</span>)?<span class="number">0</span>:x+<span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> leftColumn = y<span class="number">-1</span>&lt;<span class="number">0</span>?(<span class="number">40</span><span class="number">-1</span>):y<span class="number">-1</span>;</div><div class="line">    <span class="keyword">let</span> rightColumn = (y+<span class="number">1</span>===<span class="number">40</span>)?<span class="number">0</span>:y+<span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</div><div class="line">    total += (<span class="keyword">this</span>.state.Grid[topRow][leftColumn]&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">    total += (<span class="keyword">this</span>.state.Grid[topRow][y]&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">    total += (<span class="keyword">this</span>.state.Grid[topRow][rightColumn]&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">    total += (<span class="keyword">this</span>.state.Grid[x][leftColumn]&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">    total += (<span class="keyword">this</span>.state.Grid[x][rightColumn]&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">    total += (<span class="keyword">this</span>.state.Grid[bottomRow][leftColumn]&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">    total += (<span class="keyword">this</span>.state.Grid[bottomRow][y]&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">    total += (<span class="keyword">this</span>.state.Grid[bottomRow][rightColumn]&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> total;    </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>对grid中所有元素都应用生命游戏规则</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">update() &#123;</div><div class="line">    <span class="keyword">var</span> copyGrid = [];</div><div class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>.state.Grid.length;  </div><div class="line">    <span class="keyword">var</span> Len = <span class="keyword">this</span>.state.Grid[<span class="number">0</span>].length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len ; i++) &#123;</div><div class="line">        <span class="keyword">let</span> row = [];</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.state.Grid[i].length; j++) &#123;</div><div class="line">        <span class="keyword">var</span> neighbours = <span class="keyword">this</span>.calculateNeighbour(i,j);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.Grid[i][j])&#123;</div><div class="line">          <span class="keyword">if</span>(neighbours&lt;<span class="number">2</span>||neighbours&gt;<span class="number">3</span>)&#123;</div><div class="line">            row.push(<span class="number">0</span>);</div><div class="line">          &#125;<span class="keyword">else</span> &#123;</div><div class="line">            row.push(<span class="number">1</span>);</div><div class="line">          &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">if</span>(neighbours===<span class="number">3</span>)&#123;</div><div class="line">            row.push(<span class="number">2</span>);</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">            row.push(<span class="number">0</span>);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">      copyGrid.push(row);</div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">return</span> copyGrid;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>至此核心算法算是完成。</p>
<h3 id="render-部分"><a href="#render-部分" class="headerlink" title="render 部分"></a>render 部分</h3><h4 id="使用React框架，想要了解更多React框架知识，请移步此处"><a href="#使用React框架，想要了解更多React框架知识，请移步此处" class="headerlink" title="使用React框架，想要了解更多React框架知识，请移步此处"></a>使用React框架，想要了解更多React框架知识，请移步此处</h4><ul>
<li>GameFeedBack部分<br>– 主要是显示当前alive的总数和generation的总数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameFeedback</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className="feedback col-md-12 col-sm-12 col-lg-12"&gt;</div><div class="line">        &lt;div className="population col-md-6"&gt;</div><div class="line">          &lt;h5&gt;Population: &#123;this.props.population&#125;&lt;/h5&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div className="generations col-md-6"&gt;</div><div class="line">          &lt;h5&gt;Generations: &#123;this.props.generations&#125;&lt;/h5&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ButtonTool部分<br>– 注意此处onclick事件所调用的方法均在App组件中定义，是为了避免<code>this</code>的混淆，用<code>this.props</code>获取方法。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ButtonTool</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">var</span> text = <span class="string">'Start'</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.running) &#123;</div><div class="line">      text = <span class="string">'Parse'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (      </div><div class="line">      &lt;div className="btn-group" role="group" aria-label="..."&gt;</div><div class="line">        &lt;button onClick = &#123;this.props.parseGame&#125; id="playOrParse" type="button" className="btn btn-primary"&gt;&#123;text&#125;&lt;/button&gt;</div><div class="line">        &lt;button onClick = &#123;this.props.clear&#125; id="clear" type="button" className="btn btn-primary"&gt;clear&lt;/button&gt;</div><div class="line">        &lt;button onClick = &#123;this.props.restart&#125; id="restart" type="button" className="btn btn-primary"&gt;restart&lt;/button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Board部分</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">//无论何时何地，只要状态改变，即会调用render函数</span></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);    </div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className = 'tableContainer'&gt;</div><div class="line">        &lt;table&gt;</div><div class="line">          &lt;tbody&gt;              </div><div class="line">            &#123;this.props.Grid.map((row,i) =&gt;</div><div class="line">              &lt;tr key=&#123;i&#125;&gt;&#123;row.map((cell,j) =&gt;</div><div class="line">                  &lt;Cell</div><div class="line">                    X = &#123;i&#125;</div><div class="line">                    Y = &#123;j&#125;</div><div class="line">                    key = &#123;j&#125;</div><div class="line">                    handleClick=&#123;this.props.onClick.bind(this)&#125;</div><div class="line">                    status=&#123;cell&#125;</div><div class="line">                     /&gt;)&#125;</div><div class="line">              &lt;/tr&gt;)&#125;            </div><div class="line">          &lt;/tbody&gt;</div><div class="line">        &lt;/table&gt;   </div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Cell部分</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cell</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);    </div><div class="line">  &#125;  </div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> fill = <span class="string">''</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.props.status===<span class="number">1</span>)&#123;</div><div class="line">      fill = <span class="string">'alive'</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.props.status===<span class="number">2</span>)&#123;</div><div class="line">      fill = <span class="string">'newBorn'</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      fill=<span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (&lt;td className =&#123;fill&#125; onClick=&#123;this.props.handleClick.bind(this,this.props.X,this.props.Y)&#125;&gt;&lt;/td&gt;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>App部分<br>– 此部分主要是将先前的所有组件连接在一起，并且定义交互时需要调用的方法，以及game的过程方法</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FreeCodeCamp]]></title>
      <url>https://leocecilia.github.io/2017/01/21/FreeCodeCamp/</url>
      <content type="html"><![CDATA[<h2 id="No-repeat-please-196"><a href="#No-repeat-please-196" class="headerlink" title="No repeat please(196)"></a><a href="https://www.freecodecamp.com/challenges/no-repeats-please" target="_blank" rel="external">No repeat please</a>(196)</h2><ul>
<li>把一个字符串中的字符重新排列生成新的字符串</li>
<li>返回新生成的字符串里<strong>没有</strong>连续重复字符的字符串个数</li>
<li><p>连续重复只以<em>单</em>个字符为准</p>
<p>eg. <code>aab</code> 应该返回2， 因为总共有6种排列(<code>aab</code>,<code>aab</code>,<code>aba</code>,<code>aba</code>,<code>baa</code>,<code>baa</code>)，只有<code>aba</code>,<code>aba</code>合符标准</p>
</li>
</ul>
<hr>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="首先将该字符串转换成数组"><a href="#首先将该字符串转换成数组" class="headerlink" title="首先将该字符串转换成数组"></a>首先将该字符串转换成数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = str.split(<span class="string">''</span>);</div></pre></td></tr></table></figure>
<h3 id="运用全排列算法，来算出全排列的结果，-现在我们具体来分析如何实现该算法。"><a href="#运用全排列算法，来算出全排列的结果，-现在我们具体来分析如何实现该算法。" class="headerlink" title="运用全排列算法，来算出全排列的结果， 现在我们具体来分析如何实现该算法。"></a>运用全排列算法，来算出全排列的结果， 现在我们具体来分析如何实现该算法。</h3><p>eg. <code>abc</code> 应该返回2，因为总共有6种排列(<code>bac</code>, <code>cba</code>, <code>acb</code>, <code>bca</code>, <code>cba</code>, <code>abc</code>)</p>
<p><code>bac</code>, <code>cba</code> 都是 <code>abc</code> 的 <code>a</code>与后面两个字符替换得到的<br><code>acb</code> 是将 <code>abc</code> 第二个字符和第三个字符交换可得到<br><code>bca</code> 则是由 <code>bac</code> 的第二个和第三个字符交换得到<br>同理可知， <code>cab</code> 亦是由 <code>cba</code> 交换而来的</p>
<p><strong>结论</strong>：因此可以知道全排列算法即是<strong>从第1个数开始，分别与后面的数进行交换的过程</strong>，其复杂度为O(n!)，用递归算法可以较轻易实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">start</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(start === arr.length<span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		permutation.push(arr.join(<span class="string">''</span>));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = start;i &lt;= arr.length<span class="number">-1</span>;i++)	</div><div class="line">		&#123;	<span class="comment">//从下标为start的数开始，分别与它后面的数字交换</span></div><div class="line">			swap(start,i); </div><div class="line">			generate(start+<span class="number">1</span>);</div><div class="line">			swap(start,i); </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">  generate(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="其次运用-正则表达式-1-g来判断诸如aab之类的字符串"><a href="#其次运用-正则表达式-1-g来判断诸如aab之类的字符串" class="headerlink" title="其次运用 正则表达式 /(.)\1+/g来判断诸如aab之类的字符串"></a>其次运用 <a href="https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/JS-Regex-Resources" target="_blank" rel="external">正则表达式</a> <code>/(.)\1+/g</code>来判断诸如<code>aab</code>之类的字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">permAlone</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> regex = <span class="regexp">/(.)\1+/g</span>,<span class="comment">//匹配重复字母，\1表示后面紧跟的字符</span></div><div class="line">      arr = str.split(<span class="string">''</span>),</div><div class="line">      permutation = [];</div><div class="line">  </div><div class="line">  <span class="keyword">if</span>(str.match(regex)!==<span class="literal">null</span>&amp;&amp;str.match(regex)[<span class="number">0</span>]===str)<span class="comment">//看是不是只有aaaa之类的单词</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> temp = arr[a];</div><div class="line">    arr[a] = arr[b];</div><div class="line">    arr[b] = temp;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//堆全排列算法</span></div><div class="line">  <span class="comment">//https://en.wikipedia.org/wiki/Heap's_algorithm</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">start</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(start === arr.length<span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		permutation.push(arr.join(<span class="string">''</span>));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = start;i &lt;= arr.length<span class="number">-1</span>;i++)	</div><div class="line">		&#123;	<span class="comment">//从下标为start的数开始，分别与它后面的数字交换</span></div><div class="line">			swap(start,i); </div><div class="line">			generate(start+<span class="number">1</span>);</div><div class="line">			swap(start,i); </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  generate(<span class="number">0</span>);</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> filtered = permutation.filter(<span class="function"><span class="keyword">function</span>(<span class="params">string</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> !string.match(regex);</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> filtered.length;</div><div class="line">&#125;</div><div class="line"></div><div class="line">permAlone(<span class="string">'abcdefa'</span>);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://leocecilia.github.io/2016/12/25/how-to-use-markdown/</url>
      <content type="html"><![CDATA[<h1 id="Cmd-Markdown-简明语法手册"><a href="#Cmd-Markdown-简明语法手册" class="headerlink" title="Cmd Markdown 简明语法手册"></a>Cmd Markdown 简明语法手册</h1><p>标签： Cmd-Markdown</p>
<hr>
<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 <em> 和 *</em> 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">这是一个一级标题</div><div class="line">============================</div><div class="line"></div><div class="line">这是一个二级标题</div><div class="line">--------------------------------------------------</div><div class="line"></div><div class="line">### 这是一个三级标题</div></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="http://ghosertblog.github.com" target="_blank" rel="external">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像"></p>
<h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install vim-gnome</div></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''A docstring'''</span></div><div class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></div><div class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></div><div class="line"><span class="meta">... </span>prompt'''</div></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* nth element in the fibonacci series.</div><div class="line">* @param n &gt;= 0</div><div class="line">* @return the nth element, &gt;= 0.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> tmp;</div><div class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</div><div class="line">    tmp = a;</div><div class="line">    a += b;</div><div class="line">    b = tmp;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</div></pre></td></tr></table></figure>
<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start:&gt;https://www.zybuluo.com</div><div class="line">io=&gt;inputoutput: verification</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">sub=&gt;subroutine: Your Subroutine</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;io-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;sub-&gt;io</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Title: Here is a title</div><div class="line">A-&gt;B: Normal line</div><div class="line">B--&gt;C: Dashed line</div><div class="line">C-&gt;&gt;D: Open arrow</div><div class="line">D--&gt;&gt;A: Dashed open arrow</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">title 项目开发流程</div><div class="line">section 项目确定</div><div class="line">    需求分析       :a1, 2016-06-22, 3d</div><div class="line">    可行性报告     :after a1, 5d</div><div class="line">    概念验证       : 5d</div><div class="line">section 项目实施</div><div class="line">    概要设计      :2016-07-05  , 5d</div><div class="line">    详细设计      :2016-07-08, 10d</div><div class="line">    编码          :2016-07-15, 10d</div><div class="line">    测试          :2016-07-22, 5d</div><div class="line">section 发布验收</div><div class="line">    发布: 2d</div><div class="line">    验收: 3d</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="external">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</div><div class="line">B --&gt; C&#123;Decision&#125;</div><div class="line">C --&gt;|One| D[Result one]</div><div class="line">C --&gt;|Two| E[Result two]</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="external">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;John: Hello John, how are you?</div><div class="line">loop every minute</div><div class="line">    John--&gt;Alice: Great!</div><div class="line">end</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="external">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><p>名词 1<br>:   定义 1（左侧有一个可见的冒号和四个不可见的空格）</p>
<p>代码块 2<br>:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>
<pre><code>代码块（左侧有八个不可见的空格）
</code></pre><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre><table><br>    <tr><br>        <th rowspan="2">值班人员</th><br>        <th>星期一</th><br>        <th>星期二</th><br>        <th>星期三</th><br>    </tr><br>    <tr><br>        <td>李强</td><br>        <td>张明</td><br>        <td>王平</td><br>    </tr><br></table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;
</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;
</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="external">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
</code></pre><p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li>[ ] <strong>Cmd Markdown 开发</strong><ul>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[x] 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="external">语法参考</a></li>
<li>[x] 改进 LaTex 功能<ul>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="external">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li>[ ] <strong>七月旅行准备</strong><ul>
<li>[ ] 准备邮轮上需要携带的物品</li>
<li>[ ] 浏览日本免税店的物品</li>
<li>[x] 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://leocecilia.github.io/2016/12/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
